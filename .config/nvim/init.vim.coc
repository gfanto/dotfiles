" *****************************************************************************
" Editor settings
" *****************************************************************************

set shell=/bin/bash

set nocompatible
set noerrorbells
filetype plugin indent on
syntax on

if !has('gui_running')
  set t_Co=256
  let &t_ut=''
endif
if (match($TERM, "-256color") != -1) && (match($TERM, "screen-256color") == -1)
  set termguicolors
endif

set lazyredraw

set path+=**
set wildmenu
set wildignore+=*.o,*~,*.pyc,__pycache__

set tabstop=4 softtabstop=4 shiftwidth=4
set autoindent
set expandtab
set smartindent
set smartcase
set showmatch
set nojoinspaces
set hidden

set relativenumber
set nu
set guicursor=
set signcolumn=yes

set hlsearch
set incsearch
set inccommand=nosplit
set ignorecase

set nowrap
set noswapfile
set nobackup
set nowritebackup
set undodir=~/.config/nvim/undodir
set undofile

set complete-=i
set completeopt=menuone,noinsert,noselect
set pumheight=12

set mouse=a
set clipboard+=unnamedplus

set ve=block
set scrolloff=8
set sidescroll=0
set cmdheight=1
set updatetime=250
set notimeout
set ttimeout
set ttimeoutlen=10
set shortmess+=c

set foldmethod=syntax
set nofoldenable
set foldlevelstart=999

" ****************************************************************************
" Variables
" ****************************************************************************

let g:mapleader = "\<Space>"

if glob('~/.python3') != ''
    let g:python3_host_prog = expand('~/.python3/bin/python')
else
    let g:python3_host_prog = systemlist('which python3')[0]
endif

let g:gruvbox_contrast_dark = 'hard'
if exists('+termguicolors')
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
endif
let g:gruvbox_invert_selection='0'

if executable('rg')
    let g:rg_derive_root='true'
endif
let g:vrfr_rg = 'true'

let g:fzf_layout = {'window': {'height': 0.8, 'width': 0.8}}
let $FZF_DEFAULT_OPTS='--reverse'

let g:floaterm_autoclose = 2
hi! link FloatermBorder Normal

com! OpenPython FloatermNew --width=0.5 --wintype=normal --name=ipython --position=right ipython -i --no-autoindent
com! OpenTerm FloatermNew --width=0.5 --wintype=normal --name=term --position=right env NOTMUX=yes fish
com! CopyRel let @+ = expand('%')
com! CopyAbs let @+ = expand('%:p')
function! s:DiffWithOrig()
  let filetype=&ft
  diffthis
  vnew | r # | normal! 1Gdd
  diffthis
  exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
endfunction
com! DiffOrig call s:DiffWithOrig()

packadd cfilter

" *****************************************************************************
" Plugs
" *****************************************************************************

call plug#begin('~/.config/nvim/plugged')

Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-fugitive'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'voldikss/vim-floaterm'

Plug 'vim-airline/vim-airline'
Plug 'gruvbox-community/gruvbox'

call plug#end()

set background=dark
colorscheme gruvbox

" *****************************************************************************
" Personal key bindings
" *****************************************************************************

tnoremap <Esc> <C-\><C-n>

nnoremap <C-p> :GFiles<CR>
nnoremap <C-b> :tabprevious<CR>
nnoremap <C-n> :tabnext<CR>
nnoremap <C-t> :tabnew<CR>
nnoremap <C-q> :tabclose<CR>
nnoremap <C-l> :noh<CR>

nnoremap <silent> Y y$
nnoremap <silent> S "_S
nnoremap <silent> x "_x
nnoremap <silent> s "_s
vnoremap <silent> X "_d

nnoremap k gk
nnoremap j gj

vnoremap $ $h

nnoremap <leader>g :Rg<CR>
nnoremap <leader>f :BLines<CR>
nnoremap <Leader>t :FloatermNew env NOTMUX=yes fish<CR>
nnoremap <Leader>q :FloatermToggle<CR>

map <silent> <A-h> <C-w><
map <silent> <A-k> <C-W>-
map <silent> <A-j> <C-W>+
map <silent> <A-l> <C-w>>
map <silent> <A-s> :split<CR>
map <silent> <A-v> :vsplit<CR>
map <silent> <A-n> <C-w><C-w>
map <silent> <A-b> <C-w><S-w>

" *****************************************************************************
" COC settings
" *****************************************************************************

inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-c> coc#refresh()

nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

autocmd CursorHold * silent call CocActionAsync('highlight')

nmap <silent> gpp <Plug>(coc-diagnostic-prev-error)
nmap <silent> gp <Plug>(coc-diagnostic-prev)
nmap <silent> gnn <Plug>(coc-diagnostic-next-error)
nmap <silent> gn <Plug>(coc-diagnostic-next)

nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> cr <Plug>(coc-rename)

nnoremap <silent>gs :CocSearch <C-R>=expand("<cword>")<CR><CR>

nnoremap <Leader>r :CocList outline<CR>
nnoremap <Leader>w :CocList symbols<CR>

nnoremap <Leader>e :CocCommand explorer<CR>

command! -nargs=0 Format :call CocAction('format')

command! -nargs=? Fold :call CocAction('fold', <f-args>)
command! -nargs=0 OR :call CocAction('runCommand', 'editor.action.organizeImport')

" *****************************************************************************
" autocmd
" *****************************************************************************

fun! TrimWhitespace()
  let l:save = winsaveview()
  keeppatterns %s/\s\+$//e
  call winrestview(l:save)
endfun

autocmd BufWritePre * :call TrimWhitespace()
autocmd BufEnter * if (winnr("$") == 1 && &filetype == 'coc-explorer') | q | endif
autocmd StdinReadPre * let s:std_in=1
autocmd TextYankPost * silent! lua require'vim.highlight'.on_yank({timeout = 120})

autocmd FileType python,yaml setl foldmethod=indent
autocmd FileType markdown,rst setl wrap textwidth=80 spell spelllang=it,en

" *****************************************************************************
" load system settings
" *****************************************************************************

let sys_config = expand('<sfile>:p:h').'/sys_init.vim'
if filereadable(sys_config)
  execute 'source '.sys_config
endif
